import re
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, Defaults
from telegram.constants import ParseMode

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8478309157:AAH2TD4XVRXKqODQyMncvcyIMSyaZeKn-gA"
TABLE_NAME = "–ö–∞–ª—å–∫—É–ª—è—Ü–∏–∏ –¥–ª—è GPT"
# ======================

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bot")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
NAMES_MAP = {
    "–°–ü–†–ê–ô–¢": ("ü•§", "–°–ø—Ä–∞–π—Ç", "–û—Å–Ω–æ–≤–∞"),
    "–í–û–î–ê –°/–ì": ("üíß", "–í–æ–¥–∞ —Å/–≥", "–û—Å–Ω–æ–≤–∞"),
    "–®–í–ï–ü–°": ("ü´ß", "–®–≤–µ–ø—Å", "–û—Å–Ω–æ–≤–∞"),
    "–ú–û–õ–û–ö–û": ("ü•õ", "–ú–æ–ª–æ–∫–æ", "–ú–æ–ª–æ—á–Ω—ã–µ"),
    "–°–õ–ò–í–ö–ò": ("üßÅ", "–°–ª–∏–≤–∫–∏", "–ú–æ–ª–æ—á–Ω—ã–µ"),
    "–°–û–ö": ("üçπ", "–°–æ–∫", "–°–æ–∫–∏"),
    "–§–†–£–ö–¢–´": ("üçì", "–§—Ä—É–∫—Ç—ã", "–§—Ä—É–∫—Ç—ã"),
    "–°–ò–†–û–ü": ("üçØ", "–°–∏—Ä–æ–ø", "–°–∏—Ä–æ–ø—ã"),
    "–î–û–ë–ê–í–ö–ò": ("‚ú®", "–î–æ–±–∞–≤–∫–∏", "–î–æ–±–∞–≤–∫–∏"),
    "(–∫–æ–ª-–≤–æ)": (None, "(–∫–æ–ª-–≤–æ)", None),
}
ORDER_GROUPS = ["–û—Å–Ω–æ–≤–∞", "–ú–æ–ª–æ—á–Ω—ã–µ", "–°–æ–∫–∏", "–§—Ä—É–∫—Ç—ã", "–°–∏—Ä–æ–ø—ã", "–î–æ–±–∞–≤–∫–∏", "–ü—Ä–æ—á–µ–µ"]

def clean_text(text: str) -> str:
    if text is None:
        return ""
    return re.sub(r"[^\w\s]", "", str(text)).strip().lower()

def connect_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("google_key.json", scope)
    client = gspread.authorize(creds)
    return client.open(TABLE_NAME)

def friendly_header(h: str):
    raw = (h or "").strip()
    em, name, group = NAMES_MAP.get(raw, ("‚Ä¢", raw, "–ü—Ä–æ—á–µ–µ"))
    return em, name, group

def parse_row(headers, row):
    items = []
    i = 1
    while i < min(len(headers), len(row)):
        head = headers[i]
        val = str(row[i]).strip() if i < len(row) else ""
        if not head or not val or val == "-" or val.lower() == "‚Äî":
            i += 1
            continue
        em, name, group = friendly_header(head)
        qty = ""
        if i + 1 < len(headers) and (headers[i + 1] or "").strip().upper() == "(–ö–û–õ-–í–û)":
            qty = str(row[i + 1]).strip() if (i + 1) < len(row) else ""
            i += 1
        items.append((group, em, name, val, qty))
        i += 1

    grouped = {}
    for group, em, name, val, qty in items:
        grouped.setdefault(group, []).append((em, name, val, qty))

    sorted_groups = []
    for g in ORDER_GROUPS:
        if g in grouped:
            sorted_groups.append((g, grouped[g]))
    for g, arr in grouped.items():
        if g not in ORDER_GROUPS:
            sorted_groups.append((g, arr))
    return sorted_groups

def box_table(groups):
    lines = []
    lines.append("‚îå‚îÄ –†–ï–¶–ï–ü–¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    for group, arr in groups:
        if not arr:
            continue
        lines.append(f"‚îÇ [{group}]")
        w = max(len(name) for _, name, _, _ in arr)
        for em, name, val, qty in arr:
            prefix = (em + " ") if em else ""
            left = f"{prefix}{name}".ljust(w + (2 if em else 0))
            right = val if not qty else f"{val}  ({qty})"
            lines.append(f"‚îÇ {left} ‚îÇ {right}")
        lines.append("‚îÇ")
    if lines[-1] == "‚îÇ":
        lines.pop()
    lines.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    return "\n".join(lines)

def format_recipe(sheet_title: str, headers, row) -> str:
    groups = parse_row(headers, row)
    if not any(arr for _, arr in groups):
        return f"<b>üìã {row[0]}</b> ¬∑ <i>{sheet_title}</i>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º."
    table = box_table(groups)
    title = f"<b>üìã {row[0]}</b> ¬∑ <i>{sheet_title}</i>"
    return f"{title}\n<pre>{table}</pre>"

def find_matches_all_tabs(spread, query: str):
    q = clean_text(query)
    results = []
    for sh in spread.worksheets():
        data = sh.get_all_values()
        if not data:
            continue
        headers = data[0]
        for row in data[1:]:
            if not row:
                continue
            raw = row[0] if len(row) > 0 else ""
            cn = clean_text(raw)
            if cn and q in cn:
                results.append((sh.title, headers, row, cn))
    return results

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ ‚Äî –ø—Ä–∏—à–ª—é —Ä–µ—Ü–µ–ø—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /tabs ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫\n"
        "‚Ä¢ /list &lt;—Å–ª–æ–≤–æ&gt; ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä: <code>/list –º–æ—Ö</code>)\n"
        "‚Ä¢ /all &lt;—Å–ª–æ–≤–æ&gt; ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (–ø—Ä–∏–º–µ—Ä: <code>/all –ª–∞—Ç—Ç–µ</code>)\n"
        "–ï—Å–ª–∏ –ø—Ä–∏—à–ª—é —Å–ø–∏—Å–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å —Ü–∏—Ñ—Ä–æ–π (1,2,‚Ä¶)."
    )

async def tabs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    spread = context.bot_data["spread"]
    titles = [ws.title for ws in spread.worksheets()]
    await update.message.reply_text("–í–∫–ª–∞–¥–∫–∏:\n" + "\n".join(f"‚Ä¢ {t}" for t in titles))

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/list –º–æ—Ö</code>")
    q = " ".join(context.args)
    spread = context.bot_data["spread"]
    matches = find_matches_all_tabs(spread, q)
    if not matches:
        return await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
    context.user_data["last_results"] = matches
    names = [f"{i+1}. {m[2][0]} (üóÇ {m[0]})" for i, m in enumerate(matches)]
    await update.message.reply_text("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:\n" + "\n".join(names))

async def all_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/all –ª–∞—Ç—Ç–µ</code>")
    q = " ".join(context.args)
    spread = context.bot_data["spread"]
    matches = find_matches_all_tabs(spread, q)
    if not matches:
        return await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
    q_clean = clean_text(q)
    matches.sort(key=lambda m: (m[3] != q_clean, m[2][0]))
    chunk, acc = [], 0
    for sh, headers, row, _ in matches:
        block = format_recipe(sh, headers, row) + "\n\n"
        if acc + len(block) > 3500:
            await update.message.reply_text("".join(chunk).strip())
            chunk, acc = [], 0
        chunk.append(block); acc += len(block)
    if chunk:
        await update.message.reply_text("".join(chunk).strip())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip()
    spread = context.bot_data["spread"]

    # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    if msg.isdigit():
        idx = int(msg) - 1
        results = context.user_data.get("last_results") or []
        if 0 <= idx < len(results):
            sh, headers, row, _ = results[idx]
            return await update.message.reply_text(format_recipe(sh, headers, row))

    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    matches = find_matches_all_tabs(spread, msg)
    if not matches:
        return await update.message.reply_text("‚ùå –ù–∞–ø–∏—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî —Å—Ä–∞–∑—É –∫–∞—Ä—Ç–æ—á–∫–∞
    q_clean = clean_text(msg)
    exact = [m for m in matches if m[3] == q_clean]
    if exact:
        sh, headers, row, _ = exact[0]
        return await update.message.reply_text(format_recipe(sh, headers, row))

    # –ò–Ω–∞—á–µ ‚Äî —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    context.user_data["last_results"] = matches
    names = [f"{i+1}. {m[2][0]} (üóÇ {m[0]})" for i, m in enumerate(matches)]
    if len(names) > 10:
        names = names[:10] + [f"‚Ä¶–∏ –µ—â—ë {len(matches)-10}. –ò—Å–ø–æ–ª—å–∑—É–π <code>/all {msg}</code>"]
    await update.message.reply_text("–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä:\n" + "\n".join(names))

def main():
    log.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Google Sheet‚Ä¶")
    spread = connect_sheet()
    log.info("–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: %s", TABLE_NAME)

    log.info("–°—Ç–∞—Ä—Ç—É—é Telegram-–±–æ—Ç–∞‚Ä¶")
    app = ApplicationBuilder().token(TOKEN).defaults(Defaults(parse_mode=ParseMode.HTML)).build()
    app.bot_data["spread"] = spread

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tabs", tabs))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CommandHandler("all", all_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    log.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
